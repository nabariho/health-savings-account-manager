# HSA Manager Environment Variables
# Copy this file to .env and update the values

# =============================================================================
# CRITICAL: REQUIRED FOR APPLICATION TO FUNCTION
# =============================================================================

# OpenAI API Configuration (REQUIRED)
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# Database Configuration (REQUIRED)
DB_NAME=hsa_db
DB_USER=hsa_user
DB_PASSWORD=your-secure-database-password-here

# Application Security (REQUIRED)
# Generate a secure secret key: openssl rand -hex 32
SECRET_KEY=your-secure-secret-key-change-in-production

# =============================================================================
# DEVELOPMENT TOOLS (OPTIONAL)
# =============================================================================

# pgAdmin Configuration (for database management)
PGADMIN_EMAIL=admin@hsa.local
PGADMIN_PASSWORD=your-pgadmin-password-here

# Redis Commander Configuration (for Redis management)
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=your-redis-commander-password-here

# =============================================================================
# ADVANCED CONFIGURATION (OPTIONAL)
# =============================================================================

# Application Environment
ENVIRONMENT=development
DEBUG=true

# API Configuration
APP_NAME=HSA Onboarding API
API_HOST=0.0.0.0
API_PORT=8000

# CORS Origins (comma-separated for production)
CORS_ORIGINS=["http://localhost:3000", "http://frontend:8080"]

# File Upload Configuration
MAX_FILE_SIZE=10485760  # 10MB in bytes
UPLOAD_DIR=/app/uploads

# Database Advanced Settings
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=30

# Redis Configuration
REDIS_URL=redis://redis:6379/0
REDIS_CACHE_TTL=3600  # 1 hour in seconds

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT=json

# External Services (if needed in future)
# SENTRY_DSN=your-sentry-dsn-for-error-tracking
# MONITORING_WEBHOOK_URL=your-monitoring-webhook-url

# =============================================================================
# PRODUCTION-SPECIFIC (for production deployment)
# =============================================================================

# Production Database (uncomment for production)
# DATABASE_URL=postgresql://user:password@host:port/dbname

# Security Headers (uncomment for production)
# SECURE_SSL_REDIRECT=true
# SESSION_COOKIE_SECURE=true
# CSRF_COOKIE_SECURE=true

# Production Domains (uncomment and update for production)
# ALLOWED_HOSTS=["yourdomain.com", "www.yourdomain.com"]
# CORS_ORIGINS=["https://yourdomain.com"]

# Production Scaling (uncomment for production)
# GUNICORN_WORKERS=4
# GUNICORN_MAX_REQUESTS=1000
# GUNICORN_TIMEOUT=120

# =============================================================================
# INSTRUCTIONS
# =============================================================================
#
# 1. Copy this file: cp .env.example .env
# 2. Update OPENAI_API_KEY with your actual API key
# 3. Set secure passwords for DB_PASSWORD and SECRET_KEY
# 4. Update pgAdmin and Redis Commander passwords if using dev tools
# 5. Never commit the .env file to version control
# 6. For production, review all security-related settings
#
# Docker Commands:
# - Start all services: docker-compose up --build
# - Start with dev tools: docker-compose --profile dev up --build
# - Stop all services: docker-compose down
# - View logs: docker-compose logs -f [service-name]
# - Reset volumes: docker-compose down -v
#